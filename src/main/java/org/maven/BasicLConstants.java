/* Generated By:JavaCC: Do not edit this line. BasicLConstants.java */
package org.maven;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface BasicLConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LPAREN = 12;
  /** RegularExpression Id. */
  int RPAREN = 13;
  /** RegularExpression Id. */
  int LBRACE = 14;
  /** RegularExpression Id. */
  int RBRACE = 15;
  /** RegularExpression Id. */
  int COMMA = 16;
  /** RegularExpression Id. */
  int SEMICOLON = 17;
  /** RegularExpression Id. */
  int COLON = 18;
  /** RegularExpression Id. */
  int DOT = 19;
  /** RegularExpression Id. */
  int ASSIGN = 20;
  /** RegularExpression Id. */
  int QUESTION = 21;
  /** RegularExpression Id. */
  int EXCLAMATION = 22;
  /** RegularExpression Id. */
  int ADD = 23;
  /** RegularExpression Id. */
  int SUB = 24;
  /** RegularExpression Id. */
  int MULT = 25;
  /** RegularExpression Id. */
  int DIV = 26;
  /** RegularExpression Id. */
  int MOD = 27;
  /** RegularExpression Id. */
  int EQ = 28;
  /** RegularExpression Id. */
  int NOTEQ = 29;
  /** RegularExpression Id. */
  int LT = 30;
  /** RegularExpression Id. */
  int GT = 31;
  /** RegularExpression Id. */
  int LE = 32;
  /** RegularExpression Id. */
  int GE = 33;
  /** RegularExpression Id. */
  int AND = 34;
  /** RegularExpression Id. */
  int EQUALS = 35;
  /** RegularExpression Id. */
  int BEGIN = 36;
  /** RegularExpression Id. */
  int LEFTBRACKET = 37;
  /** RegularExpression Id. */
  int RIGHTBRAKET = 38;
  /** RegularExpression Id. */
  int END = 39;
  /** RegularExpression Id. */
  int ASSIGNMENT = 40;
  /** RegularExpression Id. */
  int EXCLAM = 41;
  /** RegularExpression Id. */
  int QMARK = 42;
  /** RegularExpression Id. */
  int PLUS = 43;
  /** RegularExpression Id. */
  int MINUS = 44;
  /** RegularExpression Id. */
  int MULTIPLY = 45;
  /** RegularExpression Id. */
  int DIVIDE = 46;
  /** RegularExpression Id. */
  int NOTEQUAL = 47;
  /** RegularExpression Id. */
  int LESSTHAN = 48;
  /** RegularExpression Id. */
  int BOOL = 49;
  /** RegularExpression Id. */
  int CONST = 50;
  /** RegularExpression Id. */
  int DO = 51;
  /** RegularExpression Id. */
  int ELSE = 52;
  /** RegularExpression Id. */
  int FALSE = 53;
  /** RegularExpression Id. */
  int IF = 54;
  /** RegularExpression Id. */
  int INT = 55;
  /** RegularExpression Id. */
  int MAIN = 56;
  /** RegularExpression Id. */
  int NOT = 57;
  /** RegularExpression Id. */
  int OR = 58;
  /** RegularExpression Id. */
  int REAL = 59;
  /** RegularExpression Id. */
  int RETURN = 60;
  /** RegularExpression Id. */
  int STRING = 61;
  /** RegularExpression Id. */
  int THEN = 62;
  /** RegularExpression Id. */
  int TRUE = 63;
  /** RegularExpression Id. */
  int VAR = 64;
  /** RegularExpression Id. */
  int VOID = 65;
  /** RegularExpression Id. */
  int WHILE = 66;
  /** RegularExpression Id. */
  int GREATERTHAN = 67;
  /** RegularExpression Id. */
  int LESSTHANEQUAL = 68;
  /** RegularExpression Id. */
  int GREATERTHANEQUAL = 69;
  /** RegularExpression Id. */
  int NUMBER = 70;
  /** RegularExpression Id. */
  int IDENTIFIER = 71;
  /** RegularExpression Id. */
  int STRINGS = 72;
  /** RegularExpression Id. */
  int DIGIT = 73;
  /** RegularExpression Id. */
  int DIGITS = 74;
  /** RegularExpression Id. */
  int LETTER = 75;
  /** RegularExpression Id. */
  int LETTERS = 76;
  /** RegularExpression Id. */
  int UNDERSCORE = 77;
  /** RegularExpression Id. */
  int OTHER = 78;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\b\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"/*\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 10>",
    "<token of kind 11>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\".\"",
    "\":=\"",
    "\"?\"",
    "\"!\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"and\"",
    "\"equals\"",
    "\"begin\"",
    "\"leftbracket\"",
    "\"rightbracket\"",
    "\"end\"",
    "\"assignment\"",
    "\"exclam\"",
    "\"qmark\"",
    "\"plus\"",
    "\"minus\"",
    "\"multiply\"",
    "\"divide\"",
    "\"notequal\"",
    "\"lessthan\"",
    "\"boolean\"",
    "\"const\"",
    "\"do\"",
    "\"else\"",
    "\"false\"",
    "\"if\"",
    "\"int\"",
    "\"main\"",
    "\"not\"",
    "\"or\"",
    "\"real\"",
    "\"return\"",
    "\"string\"",
    "\"then\"",
    "\"true\"",
    "\"var\"",
    "\"void\"",
    "\"while\"",
    "\"greaterthan\"",
    "\"lessthanequal\"",
    "\"greaterthanequal\"",
    "<NUMBER>",
    "<IDENTIFIER>",
    "<STRINGS>",
    "<DIGIT>",
    "<DIGITS>",
    "<LETTER>",
    "<LETTERS>",
    "\"_\"",
    "<OTHER>",
  };

}
